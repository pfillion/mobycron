// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/spacekitty/ownCloud/dev/go/src/github.com/pfillion/mobycron/cmd/mobycron/main.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCronner is a mock of Cronner interface
type MockCronner struct {
	ctrl     *gomock.Controller
	recorder *MockCronnerMockRecorder
}

// MockCronnerMockRecorder is the mock recorder for MockCronner
type MockCronnerMockRecorder struct {
	mock *MockCronner
}

// NewMockCronner creates a new mock instance
func NewMockCronner(ctrl *gomock.Controller) *MockCronner {
	mock := &MockCronner{ctrl: ctrl}
	mock.recorder = &MockCronnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCronner) EXPECT() *MockCronnerMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method
func (m *MockCronner) LoadConfig(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig
func (mr *MockCronnerMockRecorder) LoadConfig(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockCronner)(nil).LoadConfig), filename)
}

// Start mocks base method
func (m *MockCronner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockCronnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronner)(nil).Start))
}

// Stop mocks base method
func (m *MockCronner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockCronnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronner)(nil).Stop))
}

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockHandler) Scan() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockHandlerMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockHandler)(nil).Scan))
}

// Listen mocks base method
func (m *MockHandler) Listen() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockHandlerMockRecorder) Listen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockHandler)(nil).Listen))
}
