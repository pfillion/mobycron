// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/restic-prune/cron.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	cron "github.com/robfig/cron"
	reflect "reflect"
)

// MockCronRunner is a mock of CronRunner interface
type MockCronRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCronRunnerMockRecorder
}

// MockCronRunnerMockRecorder is the mock recorder for MockCronRunner
type MockCronRunnerMockRecorder struct {
	mock *MockCronRunner
}

// NewMockCronRunner creates a new mock instance
func NewMockCronRunner(ctrl *gomock.Controller) *MockCronRunner {
	mock := &MockCronRunner{ctrl: ctrl}
	mock.recorder = &MockCronRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCronRunner) EXPECT() *MockCronRunnerMockRecorder {
	return m.recorder
}

// AddJob mocks base method
func (m *MockCronRunner) AddJob(spec string, cmd cron.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", spec, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJob indicates an expected call of AddJob
func (mr *MockCronRunnerMockRecorder) AddJob(spec, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockCronRunner)(nil).AddJob), spec, cmd)
}

// Start mocks base method
func (m *MockCronRunner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockCronRunnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronRunner)(nil).Start))
}

// Stop mocks base method
func (m *MockCronRunner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockCronRunnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronRunner)(nil).Stop))
}

// MockJobSynchroniser is a mock of JobSynchroniser interface
type MockJobSynchroniser struct {
	ctrl     *gomock.Controller
	recorder *MockJobSynchroniserMockRecorder
}

// MockJobSynchroniserMockRecorder is the mock recorder for MockJobSynchroniser
type MockJobSynchroniserMockRecorder struct {
	mock *MockJobSynchroniser
}

// NewMockJobSynchroniser creates a new mock instance
func NewMockJobSynchroniser(ctrl *gomock.Controller) *MockJobSynchroniser {
	mock := &MockJobSynchroniser{ctrl: ctrl}
	mock.recorder = &MockJobSynchroniserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobSynchroniser) EXPECT() *MockJobSynchroniserMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockJobSynchroniser) Add(delta int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", delta)
}

// Add indicates an expected call of Add
func (mr *MockJobSynchroniserMockRecorder) Add(delta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockJobSynchroniser)(nil).Add), delta)
}

// Done mocks base method
func (m *MockJobSynchroniser) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done
func (mr *MockJobSynchroniserMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockJobSynchroniser)(nil).Done))
}

// Wait mocks base method
func (m *MockJobSynchroniser) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockJobSynchroniserMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockJobSynchroniser)(nil).Wait))
}
